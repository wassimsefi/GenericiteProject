"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var eventQueue_1 = require("./eventQueue");
var js_sdk_logging_1 = require("@optimizely/js-sdk-logging");
var logger = js_sdk_logging_1.getLogger('EventProcessor');
var MIN_FLUSH_INTERVAL = 100;
var AbstractEventProcessor = /** @class */ (function () {
    function AbstractEventProcessor(_a) {
        var dispatcher = _a.dispatcher, _b = _a.transformers, transformers = _b === void 0 ? [] : _b, _c = _a.interceptors, interceptors = _c === void 0 ? [] : _c, _d = _a.callbacks, callbacks = _d === void 0 ? [] : _d, _e = _a.flushInterval, flushInterval = _e === void 0 ? 30000 : _e, _f = _a.maxQueueSize, maxQueueSize = _f === void 0 ? 3000 : _f;
        var _this = this;
        this.dispatcher = dispatcher;
        maxQueueSize = Math.max(1, maxQueueSize);
        if (maxQueueSize > 1) {
            this.queue = new eventQueue_1.DefaultEventQueue({
                flushInterval: Math.max(flushInterval, MIN_FLUSH_INTERVAL),
                maxQueueSize: maxQueueSize,
                sink: function (buffer) { return _this.drainQueue(buffer); },
            });
        }
        else {
            this.queue = new eventQueue_1.SingleEventQueue({
                sink: function (buffer) { return _this.drainQueue(buffer); },
            });
        }
        this.transformers = transformers;
        this.interceptors = interceptors;
        this.callbacks = callbacks;
    }
    AbstractEventProcessor.prototype.drainQueue = function (buffer) {
        var _this = this;
        logger.debug('draining queue with %s events', buffer.length);
        var promises = this.groupEvents(buffer).map(function (eventGroup) {
            var formattedEvent = _this.formatEvents(eventGroup);
            return new Promise(function (resolve, reject) {
                _this.dispatcher.dispatchEvent(formattedEvent, function (response) {
                    // loop through every event in the group and run the callback handler
                    // with result
                    eventGroup.forEach(function (event) {
                        _this.callbacks.forEach(function (handler) {
                            handler({
                                result: isResponseSuccess(response),
                                event: event,
                            });
                        });
                    });
                    resolve();
                });
            });
        });
        return Promise.all(promises);
    };
    // TODO change this to ProjectConfig when js-sdk-models is available
    AbstractEventProcessor.prototype.process = function (event, projectConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, transformer, ex_1, _b, _c, interceptor, result, ex_2;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _i = 0, _a = this.transformers;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        transformer = _a[_i];
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, transformer(event, projectConfig)];
                    case 3:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_1 = _d.sent();
                        // swallow error and move on
                        logger.error('eventTransformer threw error', ex_1.message, ex_1);
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6:
                        Object.freeze(event);
                        _b = 0, _c = this.interceptors;
                        _d.label = 7;
                    case 7:
                        if (!(_b < _c.length)) return [3 /*break*/, 13];
                        interceptor = _c[_b];
                        result = void 0;
                        _d.label = 8;
                    case 8:
                        _d.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, interceptor(event, projectConfig)];
                    case 9:
                        result = _d.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        ex_2 = _d.sent();
                        // swallow and continue
                        logger.error('eventInterceptor threw error', ex_2.message, ex_2);
                        return [3 /*break*/, 11];
                    case 11:
                        if (result === false) {
                            return [2 /*return*/];
                        }
                        _d.label = 12;
                    case 12:
                        _b++;
                        return [3 /*break*/, 7];
                    case 13:
                        this.queue.enqueue(event);
                        return [2 /*return*/];
                }
            });
        });
    };
    AbstractEventProcessor.prototype.stop = function () {
        try {
            // swallow, an error stopping this queue should prevent this from stopping
            return this.queue.stop();
        }
        catch (e) {
            logger.error('Error stopping EventProcessor: "%s"', e.message, e);
        }
        return Promise.resolve();
    };
    AbstractEventProcessor.prototype.start = function () {
        this.queue.start();
    };
    return AbstractEventProcessor;
}());
exports.AbstractEventProcessor = AbstractEventProcessor;
function isResponseSuccess(response) {
    try {
        var statusCode = void 0;
        if ('statusCode' in response) {
            statusCode = response.statusCode;
        }
        else if ('status' in response) {
            statusCode = response.status;
        }
        else {
            return false;
        }
        return statusCode >= 200 && statusCode < 300;
    }
    catch (e) {
        return false;
    }
}
